apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: container-checkpoint-sidecar
  namespace: kube-system
  labels:
    app: container-checkpoint-sidecar
spec:
  selector:
    matchLabels:
      app: container-checkpoint-sidecar
  template:
    metadata:
      labels:
        app: container-checkpoint-sidecar
    spec:
      hostNetwork: true  # Using host network to access kubelet
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      serviceAccountName: container-checkpoint-sidecar
      containers:
        - name: checkpoint-sidecar
          image: localhost/external-checkpointer-sidecar:latest
          imagePullPolicy: Never
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Listing mounted files:";
              ls -la /etc/kubernetes/pki/;
              ls -la /var/lib/kubelet/pki/;
              echo "Starting controller...";
              /sidecar
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: kubelet-certs
              mountPath: /etc/kubernetes/pki
              readOnly: true
            - name: kubelet-client-certs
              mountPath: /var/lib/kubelet/pki
              readOnly: true
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: kubelet-certs
          hostPath:
            path: /etc/kubernetes/pki
            type: Directory
        - name: kubelet-client-certs
          hostPath:
            path: /var/lib/kubelet/pki
            type: DirectoryOrCreate
